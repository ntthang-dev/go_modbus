package main

import (
	"encoding/binary"
	"encoding/csv"
	"fmt"
	"io"
	"log" // Log chuẩn
	"math"
	"net"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/goburrow/modbus"
	"github.com/sirupsen/logrus" // Structured logging cho Go < 1.21
)

// --- Cấu hình Kết nối (Thiết bị thực trên Windows) ---
const (
	portNameSimple = "COM3"
	baudRate       = 19200
	dataBits       = 8
	parity         = "N"
	stopBits       = 1
	slaveID        = byte(1)
	timeoutMs      = 1000
)

// --- Cấu hình Address Base ---
const (
	addressBase = 1 // Sử dụng địa chỉ 1-based
)

// --- Cấu hình file log ---
const (
	logDir           = "logs_go_final"
	logCSVFile       = "modbus_data_go_%s.csv"
	logJSONFile      = "modbus_data_go_%s.log"
	enableCSVLogging = true
	logLevel         = logrus.InfoLevel // Đổi thành DebugLevel nếu cần xem chi tiết giải mã
)

// --- Định nghĩa cấu trúc thông tin thanh ghi ---
type RegisterInfo struct {
	Name    string
	Address uint16 // Địa chỉ Modbus (1-based theo addressBase=1)
	Type    string // Kiểu dữ liệu ("FLOAT32", "INT16U", "UTF8", "DATETIME", "CUSTOM_PF", "INT32U")
	Length  uint16 // Số lượng thanh ghi Modbus
}

// --- Danh sách các thanh ghi cần đọc ---
// !!! QUAN TRỌNG: HÃY KIỂM TRA LẠI CÁC ĐỊA CHỈ (1-based) VÀ ĐỘ DÀI (Length) NÀY VỚI TÀI LIỆU THIẾT BỊ !!!
var registersToRead = []RegisterInfo{
	// Product & Features
	{"Meter_Model", 30, "UTF8", 10},
	{"Manufacturer", 70, "UTF8", 10},
	// Present Date & Time
	{"Year_7reg", 1837, "INT16U", 1},
	{"Month_7reg", 1838, "INT16U", 1},
	{"Day_7reg", 1839, "INT16U", 1},
	{"Hour_7reg", 1840, "INT16U", 1},
	{"Minute_7reg", 1841, "INT16U", 1},
	{"Second_7reg", 1842, "INT16U", 1},
	{"Millisecond_7reg", 1843, "INT16U", 1},
	{"Day_of_Week_7reg", 1844, "INT16U", 1},
	// Dòng điện
	{"Current_A", 3000, "FLOAT32", 2},
	{"Current_B", 3002, "FLOAT32", 2},
	{"Current_C", 3004, "FLOAT32", 2},
	{"Current_N", 3006, "FLOAT32", 2},
	{"Current_G", 3008, "FLOAT32", 2},
	{"Current_Avg", 3010, "FLOAT32", 2},
	// Điện áp
	{"Voltage_AB", 3020, "FLOAT32", 2},
	{"Voltage_BC", 3022, "FLOAT32", 2},
	{"Voltage_CA", 3024, "FLOAT32", 2},
	{"Voltage_LLAvg", 3026, "FLOAT32", 2},
	{"Voltage_AN", 3028, "FLOAT32", 2},
	{"Voltage_BN", 3030, "FLOAT32", 2},
	{"Voltage_CN", 3032, "FLOAT32", 2},
	{"Voltage_LNAvg", 3034, "FLOAT32", 2},
	// Công suất
	{"ActivePower_A", 3054, "FLOAT32", 2},
	{"ActivePower_B", 3056, "FLOAT32", 2},
	{"ActivePower_C", 3058, "FLOAT32", 2},
	{"ActivePower_Total", 3060, "FLOAT32", 2},
	{"ReactivePower_A", 3062, "FLOAT32", 2},
	{"ReactivePower_B", 3064, "FLOAT32", 2},
	{"ReactivePower_C", 3066, "FLOAT32", 2},
	{"ReactivePower_Total", 3068, "FLOAT32", 2},
	{"ApparentPower_A", 3070, "FLOAT32", 2},
	{"ApparentPower_B", 3072, "FLOAT32", 2},
	{"ApparentPower_C", 3074, "FLOAT32", 2},
	{"ApparentPower_Total", 3076, "FLOAT32", 2},
	// Hệ số công suất - *** SỬA LẠI TYPE VÀ LOGIC GIẢI MÃ ***
	// {"PF_A", 3078, "CUSTOM_PF", 1}, // Đọc 1 thanh ghi, giải mã tùy chỉnh
	// {"PF_B", 3080, "CUSTOM_PF", 1},
	// {"PF_C", 3082, "CUSTOM_PF", 1},
	// {"PF_Total", 3084, "CUSTOM_PF", 1},
	// Tần số
	{"Frequency", 3110, "FLOAT32", 2},
	// Peak Demand Date/Time
	{"Peak_Demand_Date_time", 3804, "DATETIME", 4},
}

// Biến toàn cục
var running = true
var csvWriter *csv.Writer
var csvFile *os.File
var logFile *os.File

// --- Hàm xử lý tín hiệu dừng (Ctrl+C) ---
func signalHandler(sig os.Signal) {
	log.Printf("Nhận tín hiệu %v, đang dừng chương trình...", sig)
	running = false
}

// --- Hàm tạo thư mục và file log ---
func setupLogging() error {
	if err := os.MkdirAll(logDir, 0755); err != nil {
		log.Printf("Lỗi tạo thư mục log '%s': %v", logDir, err)
		return err
	}
	ts := time.Now().Format("20060102_150405")

	jsonLogPath := filepath.Join(logDir, fmt.Sprintf(logJSONFile, ts))
	var errLogrus error
	logFile, errLogrus = os.OpenFile(jsonLogPath, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if errLogrus == nil {
		mw := io.MultiWriter(os.Stdout, logFile)
		logrus.SetOutput(mw)
		logrus.SetFormatter(&logrus.JSONFormatter{TimestampFormat: time.RFC3339Nano})
		logrus.SetLevel(logLevel)
		log.Printf("Structured log (JSON) sẽ được ghi tại: %s và hiển thị trên Console (Level: %s)", jsonLogPath, logLevel.String())
	} else {
		log.Printf("Lỗi mở file log JSON '%s': %v. Logrus sẽ chỉ ghi ra Console.", jsonLogPath, errLogrus)
		logrus.SetOutput(os.Stdout)
		logrus.SetFormatter(&logrus.TextFormatter{FullTimestamp: true, ForceColors: true})
		logrus.SetLevel(logLevel)
	}

	if enableCSVLogging {
		csvLogPath := filepath.Join(logDir, fmt.Sprintf(logCSVFile, ts))
		var csvErr error
		csvFile, csvErr = os.Create(csvLogPath)
		if csvErr != nil {
			log.Printf("Lỗi tạo file log CSV '%s': %v", csvLogPath, csvErr)
		} else {
			csvWriter = csv.NewWriter(csvFile)
			headers := []string{"Timestamp"}
			activeRegisterNames := []string{}
			for _, reg := range registersToRead {
				activeRegisterNames = append(activeRegisterNames, reg.Name)
			}
			headers = append(headers, activeRegisterNames...)
			if err := csvWriter.Write(headers); err != nil {
				log.Printf("Lỗi ghi CSV header: %v", err)
			} else {
				csvWriter.Flush()
				log.Printf("Log CSV sẽ được ghi tại: %s", csvLogPath)
			}
		}
	}
	return nil
}

// --- Hàm đóng các file log ---
func closeLogs() {
	if csvFile != nil {
		csvWriter.Flush()
		csvFile.Close()
		log.Println("Đã đóng file log CSV.")
	}
	if logFile != nil {
		logFile.Close()
		log.Println("Đã đóng file log JSON của Logrus.")
	}
}

// --- Các hàm giải mã dữ liệu ---
func decodeBytes(data []byte, regInfo RegisterInfo) (interface{}, error) {
	byteOrder := binary.BigEndian
	logrus.WithFields(logrus.Fields{
		"register_name": regInfo.Name, "data_type": regInfo.Type,
		"raw_bytes_hex": fmt.Sprintf("%x", data), "byte_length": len(data),
	}).Debug("Giải mã dữ liệu thanh ghi")

	switch regInfo.Type {
	case "FLOAT32":
		if len(data) != 4 {
			return nil, fmt.Errorf("FLOAT32 cần 4 bytes, nhận %d", len(data))
		}
		bits := byteOrder.Uint32(data)
		return math.Float32frombits(bits), nil
	case "INT16U":
		if len(data) != 2 {
			return nil, fmt.Errorf("INT16U cần 2 bytes, nhận %d", len(data))
		}
		return byteOrder.Uint16(data), nil
	case "INT32U":
		if len(data) != 4 {
			return nil, fmt.Errorf("INT32U cần 4 bytes, nhận %d", len(data))
		}
		return byteOrder.Uint32(data), nil
	case "UTF8":
		expectedLen := int(regInfo.Length) * 2
		if len(data) != expectedLen {
			if len(data) > expectedLen || len(data)%2 != 0 {
				return nil, fmt.Errorf("UTF8 length %d cần %d bytes (hoặc ít hơn, chẵn), nhận %d", regInfo.Length, expectedLen, len(data))
			}
			logrus.WithFields(logrus.Fields{"register_name": regInfo.Name, "expected_bytes": expectedLen, "received_bytes": len(data)}).Warn("UTF8 nhận được ít byte hơn mong đợi")
		}
		isGarbled := true
		if len(data) >= 2 {
			for i := 0; i < len(data); i += 2 {
				if i+1 < len(data) {
					if byteOrder.Uint16(data[i:i+2]) != 0x8000 {
						isGarbled = false
						break
					}
				} else {
					isGarbled = false
					break
				}
			}
		} else {
			isGarbled = false
		}
		if isGarbled && len(data) > 0 {
			logrus.WithFields(logrus.Fields{"register_name": regInfo.Name, "raw_bytes_hex": fmt.Sprintf("%x", data)}).Warn("Phát hiện dữ liệu UTF8 không hợp lệ (pattern 0x8000)")
			return "INVALID_UTF8_DATA", nil
		}
		decodedString := strings.TrimRight(string(data), "\x00")
		if strings.ContainsRune(decodedString, '\uFFFD') {
			logrus.WithFields(logrus.Fields{"register_name": regInfo.Name, "raw_bytes_hex": fmt.Sprintf("%x", data), "decoded_string": decodedString}).Warn("Chuỗi UTF8 giải mã có thể chứa ký tự không hợp lệ")
		}
		return decodedString, nil
	case "DATETIME":
		if len(data) != 8 {
			return nil, fmt.Errorf("DATETIME cần 8 bytes, nhận %d", len(data))
		}
		yearRaw := byteOrder.Uint16(data[0:2])
		month := uint8(data[2])
		day := uint8(data[3])
		hour := uint8(data[4])
		minute := uint8(data[5])
		second := uint8(data[6])
		year := 2000 + int(yearRaw) // *** SỬA: Cộng 2000 vào năm ***
		logrus.WithFields(logrus.Fields{"register_name": regInfo.Name, "year_raw": yearRaw, "year_calc": year, "month": month, "day": day, "hour": hour, "minute": minute, "second": second, "raw_bytes_hex": fmt.Sprintf("%x", data)}).Debug("Giải mã DATETIME")
		if month == 0 || month > 12 || day == 0 || day > 31 || hour > 23 || minute > 59 || second > 59 || year < 1970 || year > 2100 {
			logrus.WithFields(logrus.Fields{"register_name": regInfo.Name, "year": year, "month": month, "day": day, "hour": hour, "minute": minute, "second": second}).Warn("Giá trị DATETIME đọc được không hợp lệ")
			return fmt.Sprintf("INVALID_DATE_VALUE(Y:%d)", yearRaw), nil
		}
		dt := time.Date(year, time.Month(month), int(day), int(hour), int(minute), int(second), 0, time.Local)
		return dt.Format("2006-01-02 15:04:05"), nil

	// *** THÊM CASE MỚI CHO KIỂU PF TÙY CHỈNH ***
	case "CUSTOM_PF":
		if len(data) != 2 {
			return nil, fmt.Errorf("CUSTOM_PF cần 2 bytes, nhận %d", len(data))
		}
		rawValue := byteOrder.Uint16(data) // Đọc giá trị 16-bit không dấu

		// Chuyển sang int16 để xử lý giá trị âm/dương
		signedValue := int16(rawValue)

		// *** GIẢ ĐỊNH SCALING FACTOR: Chia cho 10000.0 ***
		// Bạn có thể cần điều chỉnh giá trị 10000.0 này dựa trên kết quả thực tế
		// hoặc tài liệu nếu có thông tin chính xác hơn về cách scale.
		scalingFactor := 10000.0
		regValFloat := float64(signedValue) / scalingFactor

		logrus.WithFields(logrus.Fields{
			"register_name": regInfo.Name,
			"raw_uint16":    rawValue,
			"scaled_float":  regValFloat,
		}).Debug("Giải mã CUSTOM_PF")

		// Áp dụng logic Pseudo-code
		var pfValue float64
		// var pfDescription string // Có thể thêm mô tả Leading/Lagging nếu cần

		if regValFloat > 1.0 {
			pfValue = 2.0 - regValFloat
			// pfDescription = "Leading"
		} else if regValFloat < -1.0 {
			pfValue = -2.0 - regValFloat
			// pfDescription = "Leading"
		} else if math.Abs(regValFloat) == 1.0 { // So sánh float cần cẩn thận, nhưng ở đây có thể chấp nhận được
			pfValue = regValFloat
			// pfDescription = "Unity"
		} else { // Bao gồm cả trường hợp -1 < regValFloat < 1
			pfValue = regValFloat
			// pfDescription = "Lagging"
		}

		// Có thể trả về struct chứa cả giá trị và mô tả nếu muốn
		// return map[string]interface{}{"value": pfValue, "type": pfDescription}, nil
		return pfValue, nil // Chỉ trả về giá trị PF cuối cùng

	default:
		return nil, fmt.Errorf("kiểu dữ liệu không hỗ trợ: %s", regInfo.Type)
	}
}

// --- Hàm đọc tất cả thanh ghi (Đọc từng mục) ---
func readAllRegisters(client modbus.Client) map[string]interface{} {
	results := make(map[string]interface{})
	if len(registersToRead) == 0 {
		return results
	}

	for _, regInfo := range registersToRead {
		address_1based := regInfo.Address

		if address_1based < uint16(addressBase) {
			logrus.Errorf("Địa chỉ cấu hình %d (%s) nhỏ hơn addressBase %d", address_1based, regInfo.Name, addressBase)
			results[regInfo.Name] = "INVALID_ADDR_CFG"
			continue
		}
		address_0based := address_1based - uint16(addressBase)

		// *** SỬA: Đọc số lượng thanh ghi chính xác (Length) ***
		// Đối với CUSTOM_PF, Length phải là 1.
		// Các kiểu khác giữ nguyên Length đã định nghĩa.
		readCount := regInfo.Length
		// if regInfo.Type == "CUSTOM_PF" { readCount = 1 } // Đảm bảo đọc 1 thanh ghi cho PF

		logrus.WithFields(logrus.Fields{
			"register_name": regInfo.Name, "address_1based": address_1based, "address_0based": address_0based,
			"count_regs": readCount, "data_type": regInfo.Type, // Log Type gốc
		}).Debug("Chuẩn bị đọc thanh ghi/cụm")

		// Đọc số lượng thanh ghi chính xác
		readBytes, err := client.ReadHoldingRegisters(address_0based, readCount)

		if err != nil {
			handleModbusError(err, slaveID, timeoutMs)
			results[regInfo.Name] = "READ_ERROR"
			time.Sleep(50 * time.Millisecond)
			continue
		}

		expectedBytes := int(readCount) * 2
		if len(readBytes) != expectedBytes {
			logrus.WithFields(logrus.Fields{
				"register_name": regInfo.Name, "address_0based": address_0based, "count_regs": readCount,
				"received_bytes": len(readBytes), "expected_bytes": expectedBytes,
			}).Error("Lỗi độ dài dữ liệu đọc")
			results[regInfo.Name] = "LENGTH_ERROR"
			continue
		}

		decodedValue, decodeErr := decodeBytes(readBytes, regInfo) // Hàm giải mã sẽ xử lý dựa trên Type
		if decodeErr != nil {
			logrus.WithError(decodeErr).WithFields(logrus.Fields{
				"register_name": regInfo.Name, "raw_bytes_hex": fmt.Sprintf("%x", readBytes),
			}).Error("Lỗi giải mã thanh ghi")
			results[regInfo.Name] = "DECODE_ERROR"
		} else {
			results[regInfo.Name] = decodedValue
		}
		time.Sleep(20 * time.Millisecond)

	}
	return results
}

// --- Hàm Chính ---
func main() {
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
	go func() { sig := <-sigs; signalHandler(sig) }()

	if err := setupLogging(); err != nil {
		log.Println("!!! Lỗi nghiêm trọng khi thiết lập logging. Chương trình sẽ thoát.")
		return
	}
	defer closeLogs()

	log.Println("--- Bắt đầu chương trình Modbus Go Client (Kết nối thiết bị thực) ---")

	windowsPortPath := fmt.Sprintf(`\\.\%s`, portNameSimple)
	log.Printf("Sử dụng đường dẫn cổng: %s", windowsPortPath)

	handler := modbus.NewRTUClientHandler(windowsPortPath)
	handler.BaudRate = baudRate
	handler.DataBits = dataBits
	handler.Parity = parity
	handler.StopBits = stopBits
	handler.SlaveId = slaveID
	handler.Timeout = time.Duration(timeoutMs) * time.Millisecond

	var client modbus.Client
	var connectErr error

	for running {
		if client == nil {
			log.Printf("Đang thử kết nối tới %s...", portNameSimple)
			connectErr = handler.Connect()
			if connectErr != nil {
				logrus.WithError(connectErr).WithField("port", windowsPortPath).Error("Không thể kết nối Modbus")
				log.Printf("Sẽ thử lại sau 5 giây...")
				waitUntil := time.Now().Add(5 * time.Second)
				for running && time.Now().Before(waitUntil) {
					time.Sleep(100 * time.Millisecond)
				}
				if !running {
					break
				}
				continue
			}
			log.Println(">>> Kết nối thành công!")
			client = modbus.NewClient(handler)
		}

		if client != nil {
			startTime := time.Now()
			data := readAllRegisters(client)
			readDuration := time.Since(startTime)

			// --- Hiển thị Console ---
			fmt.Println("\n--- Giá trị đọc được lúc", startTime.Format("15:04:05"), "---")
			activeRegistersMap := make(map[string]bool)
			for _, regInfo := range registersToRead {
				activeRegistersMap[regInfo.Name] = true
				value, ok := data[regInfo.Name]
				displayValue := "NOT_IN_RESULT"
				if ok {
					switch v := value.(type) {
					case float32:
						if math.IsNaN(float64(v)) || math.IsInf(float64(v), 0) {
							displayValue = fmt.Sprintf("%v", v)
						} else {
							displayValue = fmt.Sprintf("%.4f", v)
						}
					case float64:
						if math.IsNaN(v) || math.IsInf(v, 0) {
							displayValue = fmt.Sprintf("%v", v)
						} else {
							displayValue = fmt.Sprintf("%.4f", v)
						} // Hiển thị PF đã giải mã
					case string:
						displayValue = fmt.Sprintf("%q", v)
					default:
						displayValue = fmt.Sprintf("%v", v)
					}
				}
				fmt.Printf("%-25s: %s\n", regInfo.Name, displayValue)
			}
			fmt.Println("------------------------------------------")

			// --- Ghi Log Dữ liệu ---
			logTimestamp := startTime.Format(time.RFC3339Nano)
			logFields := logrus.Fields{
				"timestamp_rfc3339": logTimestamp, "read_duration_ms": readDuration.Milliseconds(), "slave_id": int(slaveID),
			}
			validDataCount := 0
			errorDataCount := 0
			for key, value := range data {
				if _, isActive := activeRegistersMap[key]; !isActive {
					continue
				}
				isErrorValue := false
				if strVal, ok := value.(string); ok {
					if strings.Contains(strVal, "ERROR") || strings.Contains(strVal, "INVALID") {
						isErrorValue = true
						errorDataCount++
					}
				}
				if isErrorValue {
					logFields[key] = value
				} else {
					validDataCount++
					switch v := value.(type) {
					case float32:
						if math.IsNaN(float64(v)) || math.IsInf(float64(v), 0) {
							logFields[key] = nil
						} else {
							logFields[key] = math.Round(float64(v)*10000) / 10000
						}
					case float64:
						if math.IsNaN(v) || math.IsInf(v, 0) {
							logFields[key] = nil
						} else {
							logFields[key] = math.Round(v*10000) / 10000
						} // Log PF đã giải mã
					default:
						logFields[key] = v
					}
				}
			}
			logFields["registers_total_attempted"] = len(registersToRead)
			logFields["registers_ok"] = validDataCount
			logFields["registers_error"] = errorDataCount
			logrus.WithFields(logFields).Info("Modbus Data Read")

			if enableCSVLogging && csvWriter != nil {
				row := []string{startTime.Format("2006-01-02 15:04:05.000")}
				for _, regInfo := range registersToRead {
					val, _ := data[regInfo.Name]
					row = append(row, fmt.Sprintf("%v", val))
				}
				if err := csvWriter.Write(row); err != nil {
					logrus.WithError(err).Error("Lỗi ghi dòng CSV")
				}
				csvWriter.Flush()
			}
		} else {
			log.Println("Lỗi logic: client là nil sau khi kiểm tra kết nối.")
			time.Sleep(5 * time.Second)
			continue
		}
		sleepDuration := 1 * time.Second
		waitUntil := time.Now().Add(sleepDuration)
		for running && time.Now().Before(waitUntil) {
			time.Sleep(100 * time.Millisecond)
		}
	}
	log.Println("Vòng lặp chính kết thúc.")
}

// --- Các hàm phụ trợ (handleModbusError, getModbusExceptionMessage) ---
func handleModbusError(err error, slaveID byte, timeoutMs int) {
	if mbErr, ok := err.(*modbus.ModbusError); ok {
		logrus.WithError(err).WithFields(logrus.Fields{
			"slave_id": int(slaveID), "exception_code": mbErr.ExceptionCode, "exception_msg": getModbusExceptionMessage(mbErr.ExceptionCode),
		}).Error("Lỗi Modbus từ Slave")
	} else if os.IsTimeout(err) {
		logrus.WithError(err).WithFields(logrus.Fields{
			"slave_id": int(slaveID), "timeout_ms": timeoutMs,
		}).Warn("Timeout khi chờ phản hồi từ Slave (os.IsTimeout)")
	} else if netErr, ok := err.(net.Error); ok && netErr.Timeout() {
		logrus.WithError(err).WithFields(logrus.Fields{
			"slave_id": int(slaveID), "timeout_ms": timeoutMs,
		}).Warn("Timeout mạng khi chờ phản hồi từ Slave (net.Error)")
	} else {
		logrus.WithError(err).WithField("error_type", fmt.Sprintf("%T", err)).Warn("Lỗi giao tiếp khác")
	}
}

func getModbusExceptionMessage(code byte) string {
	switch code {
	case modbus.ExceptionCodeIllegalFunction:
		return "Illegal Function"
	case modbus.ExceptionCodeIllegalDataAddress:
		return "Illegal Data Address"
	case modbus.ExceptionCodeIllegalDataValue:
		return "Illegal Data Value"
	case modbus.ExceptionCodeServerDeviceFailure:
		return "Server Device Failure"
	case modbus.ExceptionCodeAcknowledge:
		return "Acknowledge"
	case modbus.ExceptionCodeServerDeviceBusy:
		return "Server Device Busy"
	case modbus.ExceptionCodeGatewayPathUnavailable:
		return "Gateway Path Unavailable"
	case modbus.ExceptionCodeGatewayTargetDeviceFailedToRespond:
		return "Gateway Target Device Failed To Respond"
	default:
		return "Unknown Exception Code (" + strconv.Itoa(int(code)) + ")"
	}
}
